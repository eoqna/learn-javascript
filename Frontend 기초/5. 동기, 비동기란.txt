동기 : 답변을 기다리는 것




비동기 : 답변을 기다리지 않는 것




ex)
A가 수박을 던지고 B가 수박을 받아서 쌓는 역할로 일을 하는 경우

동기식 : A가 수박을 던지고 B가 수박을 잘 받았는지 답변을 기다리고 있는다.

	답변이 오기 전까지 아무일도 하지않고 기다리다가 답변이 오면 다시 일을 시작한다.

비동기식 : A가 수박을 던지고 B가 수박을 받았는지 답변이 없어도 바로 다시 수박을 들어올려서 B에게 수박을 던진다.


좋다 나쁘다의 개념이 아닌 서로 다른 개념으로 이해하기

장점
동기식 - 업무의 프로세스가 단순하다.

비동기식 - 답변이 없어도 일을 계속 수행하므로 일을 효율적으로 할 수 있다.(자원을 효율적으로 사용할 수 있다.)

단점
동기식 - 답변이 있어야 일을 진행할 수 있으므로 효율적인 일을 수행하기 어렵다.(자원이 비효율적으로 사용된다.)

비동기식 - 답변의 확인이 불가능하기때문에 잘 전달됐는지 확인할 수 없다.

비동기로 일을 처리할 때는 효율적이지만 그에 따라 처리가 조금 복잡해진다.


Blocking : 동기식에서 답변이 올 때까지 기다리는 상태

Non-blocking : 비동기식에서 답변이 올 때까지 기다리지 않는 상태


그렇다면 무조건 비동기로 처리해야하나?

프로그램을 구현할 때 효율성을 가지고 따진다면 비동기로 구현하는 것이 좋다.

하지만 어떤 상황이냐에 따라 동기와 비동기를 선택하여 구현해야한다.

ex)
슈퍼에서 아이스크림을 구매하고 남은 돈으로 정육점에서 고기를 산다고 가정해보자.

만약 슈퍼에서 3000원짜리 아이스크림을 사고 7000원을 받지않고 정육점에서 고기를 사러간다면 안될것이다.

이처럼 결과가 다음 행동에 지장을 주는 경우에는 동기식으로 일을 처리해야한다.

