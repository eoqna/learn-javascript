JS Module System

JS는 간단히 웹 브라우저를 조작하기 위해 개발된 언어였다.

하지만 애플리케이션의 규모가 커지면서 파일을 여러가지로 분리하게 됐는데 분리된 파일을 module이라고 부른다.


장점
유지보수용이 : 기능들이 모듈화가 잘 되어있는 경우, 의존성을 줄일 수 있기 때문에 기능의 개선이나 수정이 용이하다.

네임 스페이스화 : 코드의 양이 많아질수록 전역 스코프에 존재하는 변수명이 겹치는 경우가 존재하는데 모듈로 분리하면 모듈만의 네임스페이스를 갖기 때문에 문제가 해결된다.

재사용성 : 같은 코드를 반복하지 않고 모듈로 분리시켜서 필요할 때마다 재활용할 수 있다.


Module System : 분리된 파일을 언제든지 불러올 수 있게 하는 것

html에서 js를 불러오려면 script태그에 선언해서 불러오면 된다. <script src=".js"></script>

하지만 이 방법에는 문제가 있는데 바로 마치 하나의 파일 안에 있는 것처럼 전역 스코프를 공유한다는 것이다.

ex)

a.js => var number = 10;

b.js => var number = 20;

index.html => <script src="a.js"></script>
		  <script src="b.js"></script>
		  <script>console.log('number : ',number)</script>

결과 : number : 20

이유 : html파일은 위에서 부터 순서대로 코드를 읽어내려가기 때문에 나중에 선언된 b의 number값인 20을 호출하게 된다.

만약 b.js에서 number를 선언하기 전에 console.log로 number을 출력한다면 a의 number값인 10이 출력된다.

ex)

a.js => var number = 10;

b.js => console.log('number : ', number); var number = 20;

index.html => <script src="a.js"></script>
		  <script src="b.js"></script>
		  <script>console.log('number : ',number)</script>

결과 : number : 10 number : 20


script태그에 type="module"을 지정하게 되면 해당 소스파일은 Module로 간주가 된다.

각각의 script에 type="module"을 선언하고 다시 console.log로 number을 출력한다면

각각의 파일들은 모듈별로 스코프를 갖게 되고 html에서 number을 호출하면 number은 정의되지 않은 변수여서 오류가 출력된다.


모듈은 import로 가져올 수 있고 export로 내보낼 수 있다.


Module System의 종류

* 현재 활발하게 사용되는 모듈 시스템은 CommonJS와 ES Module 시스템 이다.

AMD : 가장 오래된 모듈 시스템 중 하나로 require.js라는 라이브러리를 통해 처음 개발되었다.

CommonJS : NodeJS 환경을 위해 만들어진 모듈 시스템이다.

UMD : AMD와 CommonJS와 같은 다양한 모듈 시스템을 함께 사용하기 위해 만들어졌다.

ES Module : ES6(ES2015)에 도입된 자바스크립트 모듈 시스템이다.
		
		script 태그에 type="module" 속성을 추가해주면 이 파일이 모듈로서 동작한다.

		export default를 사용하여 하나의 기본 함수를 내보낼 수 있다.



CommonJS 방식 : Module을 내보낼때는 exports, module.exports를 사용하고, 불러올때는 require를 사용하여 불러온다.



ES Module for NodeJS
Babel과 같이 트랜스파일러(Transpiler)를 사용했어야 했지만 NodeJs 13.2부터 ES모듈 시스템에 대한 정식 지원이 시작됨에 따라

NodeJS에서도 다른 도구 없이 손쉽게 ES Module을 사용할 수 있게 됐다. 

사용 방법
package.json -> type="module"을 선언한다.

